go-ethereum/common/bitutil
  func XORBytes(dst, a, b []byte) int
  func ANDBytes(dst, a, b []byte) int
  func ORBytes(dst, a, b []byte) int
  func TestBytes(p []byte) bool
  func CompressBytes(data []byte) []byte
  func DecompressBytes(data []byte) []byte

go-ethereum/common/compiler
  type Contract struct
  type ContractInfo struct
  type Solidity struct
  func SolidityVersion(solc string) (*Solidity, error)
  func CompileSolidityString(solc, source string) (map[string]*Contract, error)
  func CompileSolidity(solc string, sourcefiles ...string) (map[string]*Contract, error)

go-ethereum/common/fdlimit
  func Raise(max uint64) error
  func Current() (int, error)
  func Maximum() (int, error)

go-ethereum/common/hexutil
  func Decode(input string) ([]byte, error)
  func MustDecode(input string) ([]byte)
  func Encode(b []byte) string
  func DecodeUint64(input string) (uint64, error)
  func MustDecodeUint64(input string) uint64
  func EncodeUint64(i uint64) string
  func DecodeBig(input string) (*big.Int, error)
  func MustDecodeBig(input string) *big.Int
  func EncodeBig(bigint *big.Int) string

  type Bytes []byte
  func (b Bytes) MarshalText() ([]byte, error)
  func (b *Bytes) UnmarshalJSON(input []byte) error
  func (b *Bytes) UnmarshalText(input []byte) error
  func (b Bytes) String() string

go-ethereum/common
  type Hash [HashLength]byte
  type UnprefixedHash Hash
  type Address [AddressLength]byte
  type UnprefixedAddress Address

  type StorageSize float64

  func MakeName(name, version string) string
  func FileExist(filePath string) bool
  func AbsolutePath(Datadir string, filename string) string

go-ethereum/log
  type Lvl int
  func (l Lvl) AlignedString() string
  func (l Lvl) String() string
  func LvlFromString(lvlString string) (Lvl, error)
  type Record struct
  type RecordKeyNames
  type Logger interface
  type Lazy struct
  type Ctx map[string]interface{}

go-ethereum/params
  type ChainConfig struct
  type EthashConfig struct
  type CliqueConfig struct
  type Rules struct
  type GasTable struct
  

go-ethereum/core/asm
  type token struct {
    typ    tokenType
    lineno int
    text   string
  }
  func Lex(name string, source []byte, debug bool) <-chan token

go-ethereum/core/bloombits
  type Generator struct
  func (b *Generator) AddBloom(index uint, bloom types.Bloom) error
  func (b *Generator) Bitset(idx uint) ([]byte, error)
  func NewGenerator(section uint) (*Generator, error)

go-ethereum/core
  type Validator interface
  type Processor interface

  type BlockValidator struct
  func (v *BlockValidator) ValidateBody(block *types.Block) error
  func (v *BlockValidator) ValidateState(block, parent *types.Block, statedb *state.StateDB, receipts types.Receipts, usedGas uint64) error
  func NewBlockValidator(config *params.ChainConfig, blockchain *BlockChain, engine consensus.Engine) *BlockValidator
  func CalcGasLimit(parent *types.Block) uint64

go-ethereum/ethdb
  type Putter interface
  type Batch interface
  type Database interface

  type MemDatabase struct
  func NewMemDatabaseWithCap(size int) (*MemDatabase, error)
  func (db *MemDatabase) Put(key []byte, value []byte) error
  func (db *MemDatabase) Has(key []byte) (bool, error)
  func (db *MemDatabase) Get(key []byte) ([]byte, error)
  func (db *MemDatabase) Keys() [][]byte
  func (db *MemDatabase) Delete(key []byte) error
  func (db *MemDatabase) Close()
  func (db *MemDatabase) NewBatch() Batch

  type LDBDatabase struct
  func NewLDBDatabase(file string, cache int, handles int) (*LDBDatabase, error)

go-ethereum/trie
  type DatabaseReader interface
  type Database struct
  func NewDatabase(diskdb etheb.Database) *Database
  func (db *Database) DiskDB() DatabaseReader
  func (db *Database) Insert(hash common.Hash, blob []byte)
  func (db *Database) Node(hash common.Hash) ([]byte, error)
  func (db *Database) Reference(child common.Hash, parent common.Hash)
  func (db *Database) Dereference(child common.Hash, parent common.Hash)
  func (db *Database) Commit(node common.Hash, report bool) error

  type NodeIterator interface
  type Iterator struct
  func NewIterator(it NodeIterator) *Iterator
  func NewDifferenceIterator(a, b NodeIterator) (NodeIterator, *int)

  type SecureTrie struct
  func (t *SecureTrie) Get(key []byte) []byte
  func (t *SecureTrie) TryGet(key []byte) ([]byte, error)
  func (t *SecureTrie) Update(key, value []byte)
  func (t *SecureTrie) TryUpdate(key, value []byte) error
  func (t *SecureTrie) Delete(key []byte)
  func (t *SecureTrie) TryDelete(key []byte) error
  func (t *SecureTrie) GetKey(shaKey []byte) []byte
  func (t *SecureTrie) Commit(onleaf LeafCallback) (root common.Hash, err error)
  func (t *SecureTrie) Hash() common.Hash
  func (t *SecureTrie) Root() []byte
  func (t *SecureTrie) Copy() *SecureTrie
  func (t *SecureTrie) NodeIterator(start []byte) NodeIterator

  type Trie struct
  func (t *Trie) Get(key []byte) []byte
  func (t *Trie) TryGet(key []byte) ([]byte, error)
  func (t *Trie) Update(key, value []byte)
  func (t *Trie) TryUpdate(key, value []byte) error
  func (t *Trie) Delete(key []byte)
  func (t *Trie) TryDelete(key []byte) error
  func (t *Trie) Root() []byte
  func (t *Trie) Hash() common.Hash
  func (t *Trie) Commit(onleaf LeafCallback) (root common.Hash, err error)

go-ethereum/event
  type Feed struct
  func (f *Feed) Subscribe(channel interface{}) Subscription
  func (f *Feed) Send(value interface{}) (nsent int)

  type Subscription interface
  func NewSubscription(producer func(<-chan struct{}) error) Subscription
  type ResubscribeFunc func(context.Context) (Subscription, error)
  func Resubscribe(time.Duration, ResubscribeFunc) Subscription
  type SubscriptionScope struct
  func (sc *SubscriptionScope) Track(s Subscription) Subscription
  func (sc *SubscriptionScope) Close()
  func (sc *SubscriptionScope) Count() int

go-ethereum/event/filter
  type Filter interface
  type FilterEvent struct
  type Filters struct
  func New() *Filters
  func (self *Filters) Start()
  func (self *Filters) Stop()
  func (self *Filters) Notify(filter Filter, data interface{})
  func (self *Filters) Install(watcher Filter) int
  func (self *Filters) Uninstall(id int)
  func (self *Filters) Match(a, b Filter) bool
  func (self *Filters) Get(i int) Filter


Print log in testcase
  t.Log(...)
  go test -v package
